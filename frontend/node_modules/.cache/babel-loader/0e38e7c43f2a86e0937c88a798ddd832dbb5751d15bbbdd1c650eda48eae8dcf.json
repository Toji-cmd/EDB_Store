{"ast":null,"code":"var _jsxFileName = \"/Users/saksham/Documents/Projects/SRSProject/frontend/src/components/CommentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./CommentSection.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentSection = ({\n  productId\n}) => {\n  _s();\n  const [userName, setUserName] = useState(\"\");\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const [rating, setRating] = useState(5);\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const token = localStorage.getItem(\"token\");\n\n  // Fetch User Data\n  useEffect(() => {\n    const fetchUserData = async () => {\n      if (!token) return;\n      try {\n        const response = await fetch(`http://localhost:3300/user?token=${token}`);\n        const data = await response.json();\n        if (response.ok) {\n          var _data$user;\n          setUserName(((_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.name) || \"Anonymous\");\n        } else {\n          setMessage(data.message || \"Failed to load user data.\");\n        }\n      } catch (error) {\n        setMessage(\"Error fetching user data.\");\n      }\n    };\n    fetchUserData();\n  }, [token]);\n\n  // Fetch Comments\n  const fetchComments = async () => {\n    try {\n      const response = await fetch(`http://localhost:3300/product/comment/${productId}`);\n      const data = await response.json();\n      console.log(\"Fetched comments from DB:\", data); // Debugging\n\n      if (data && typeof data === \"object\") {\n        // Convert object to array\n        const commentsArray = Object.values(data).reverse();\n        setComments(commentsArray);\n      } else {\n        setComments([]);\n      }\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      setMessage(\"Error fetching comments.\");\n    }\n  };\n  useEffect(() => {\n    fetchComments();\n  }, [productId]);\n\n  // Handle Comment Submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!userName || !comment || !rating) {\n      setMessage(\"All fields are required!\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:3300/product/comment/${productId}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userName,\n          comment,\n          rating\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setComment(\"\");\n        setRating(5);\n        setMessage(\"\");\n\n        // Re-fetch comments from the database after submitting\n        fetchComments();\n      } else {\n        setMessage(data.message || \"Failed to add comment.\");\n      }\n    } catch (error) {\n      setMessage(\"Error submitting comment.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [comments.length, \" Comments\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-input-box\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"comment-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Add a comment...\",\n          value: comment,\n          onChange: e => setComment(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: loading,\n          children: loading ? \"Submitting...\" : \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"comment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"comment-list\",\n      children: comments.length > 0 ? comments.map((c, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"comment-item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"@\", c.userName || \"Unknown\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-timestamp\",\n            children: c.timestamp || \"Just now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: c.comment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-rating\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Rating: \", c.rating || 5]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: Array.from({\n                length: c.rating || 5\n              }, (_, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"comment-rating-star\",\n                children: \"\\u2B50 \"\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentSection, \"/FUPvER3Eu0IU2534lyL4ogL2k0=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CommentSection","productId","_s","userName","setUserName","comment","setComment","comments","setComments","rating","setRating","message","setMessage","loading","setLoading","token","localStorage","getItem","fetchUserData","response","fetch","data","json","ok","_data$user","user","name","error","fetchComments","console","log","commentsArray","Object","values","reverse","handleSubmit","e","preventDefault","method","headers","body","JSON","stringify","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","value","onChange","target","required","type","disabled","map","c","index","timestamp","Array","from","_","i","_c","$RefreshReg$"],"sources":["/Users/saksham/Documents/Projects/SRSProject/frontend/src/components/CommentSection.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./CommentSection.css\";\n\nconst CommentSection = ({ productId }) => {\n    const [userName, setUserName] = useState(\"\");\n    const [comment, setComment] = useState(\"\");\n    const [comments, setComments] = useState([]);\n    const [rating, setRating] = useState(5);\n    const [message, setMessage] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const token = localStorage.getItem(\"token\");\n\n    // Fetch User Data\n    useEffect(() => {\n        const fetchUserData = async () => {\n            if (!token) return;\n            try {\n                const response = await fetch(`http://localhost:3300/user?token=${token}`);\n                const data = await response.json();\n                if (response.ok) {\n                    setUserName(data.user?.name || \"Anonymous\");\n                } else {\n                    setMessage(data.message || \"Failed to load user data.\");\n                }\n            } catch (error) {\n                setMessage(\"Error fetching user data.\");\n            }\n        };\n        fetchUserData();\n    }, [token]);\n\n    // Fetch Comments\n    const fetchComments = async () => {\n        try {\n            const response = await fetch(`http://localhost:3300/product/comment/${productId}`);\n            const data = await response.json();\n            console.log(\"Fetched comments from DB:\", data); // Debugging\n    \n            if (data && typeof data === \"object\") {\n                // Convert object to array\n                const commentsArray = Object.values(data).reverse();\n                setComments(commentsArray);\n            } else {\n                setComments([]);\n            }\n        } catch (error) {\n            console.error(\"Fetch error:\", error);\n            setMessage(\"Error fetching comments.\");\n        }\n    };\n    \n\n    useEffect(() => {\n        fetchComments();\n    }, [productId]);\n\n    // Handle Comment Submission\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!userName || !comment || !rating) {\n            setMessage(\"All fields are required!\");\n            return;\n        }\n        setLoading(true);\n\n        try {\n            const response = await fetch(`http://localhost:3300/product/comment/${productId}`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ userName, comment, rating }),\n            });\n\n            const data = await response.json();\n            if (response.ok) {\n                setComment(\"\");\n                setRating(5);\n                setMessage(\"\");\n\n                // Re-fetch comments from the database after submitting\n                fetchComments();\n            } else {\n                setMessage(data.message || \"Failed to add comment.\");\n            }\n        } catch (error) {\n            setMessage(\"Error submitting comment.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"comment-section\">\n            <h3>{comments.length} Comments</h3>\n            <div className=\"comment-input-box\">\n                <form onSubmit={handleSubmit} className=\"comment-form\">\n                    <textarea\n                        placeholder=\"Add a comment...\"\n                        value={comment}\n                        onChange={(e) => setComment(e.target.value)}\n                        required\n                    />\n                    <button type=\"submit\" disabled={loading}>\n                        {loading ? \"Submitting...\" : \"Comment\"}\n                    </button>\n                </form>\n            </div>\n\n            {message && <p className=\"comment-message\">{message}</p>}\n\n            <ul className=\"comment-list\">\n                {comments.length > 0 ? (\n                    comments.map((c, index) => (\n                        <li key={index} className=\"comment-item\">\n                            <div className=\"comment-content\">\n                                <strong>@{c.userName || \"Unknown\"}</strong>\n                                <span className=\"comment-timestamp\">{c.timestamp || \"Just now\"}</span>\n                                <p>{c.comment}</p>\n                                <div className=\"comment-rating\">\n                                    <span>Rating: {c.rating || 5}</span>\n                                    <span>\n                                        {Array.from({ length: c.rating || 5 }, (_, i) => (\n                                            <span key={i} className=\"comment-rating-star\">⭐ </span>\n                                        ))}\n                                    </span>\n                                </div>\n                            </div>\n                        </li>\n                    ))\n                ) : (\n                    <p>No comments yet.</p>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default CommentSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}